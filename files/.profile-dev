echo "loading profile-dev..."

# Node
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# yarn
export PATH="$PATH:/opt/yarn-[version]/bin"
export PATH="$PATH:`yarn global bin`"


# .zshrc
# ...
# hub - github cli tool
if hash hub 2>/dev/null; then
  eval "$(hub alias -s)"
  alias gstat='tput sc; until [ "$(hub ci-status)" != "pending" ]; do tput ed; echo ""; hub ci-status -v; echo "\n Checking again in 10..."; sleep 10; tput rc; done;  say "Build Complete"; tput ed; echo ""; hub ci-status -v; echo ""; hub ci-status; [ "$(hub ci-status)" = "success" ];'
else
  echo "Hub command not installed - please run \`brew install hub\`"
fi

# ngrok
export PATH="$PATH:/Applications"

check for NVM version use
checkNVM() {
  if [[ -f .nvmrc ]] ; then
    A=$( cat .nvmrc )
    # A="v$A"
    B=$( nvm current 2>&1 )

    # only get B equal to length of A
    B=${B:0:${#A}}

    if [[ $A != $B ]] ; then echo "nvm use $A" && nvm use > /dev/null ; fi ;
  fi ;
}
checkNVM

# place this after nvm initialization!
# autoload -U add-zsh-hook
# load-nvmrc() {
#   local node_version="$(nvm version)"
#   local nvmrc_path="$(nvm_find_nvmrc)"

#   if [ -n "$nvmrc_path" ]; then
#     local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

#     if [ "$nvmrc_node_version" = "N/A" ]; then
#       nvm install
#     elif [ "$nvmrc_node_version" != "$node_version" ]; then
#       nvm use
#     fi
#   elif [ "$node_version" != "$(nvm version default)" ]; then
#     echo "Reverting to nvm default version"
#     nvm use default
#   fi
# }
# add-zsh-hook chpwd load-nvmrc
# load-nvmrc

# personal directories
export LEARN=~/dev/learn
export PEDRO_PROJECTS=~/dev/pedro-projects

# personal commands
alias show-global-packages="npm list -g --depth=0; yarn global list"
alias delete-node-modules="rm -rf node_modules/"
alias fix-brew-permissions="sudo chown -R $(whoami) $(brew --prefix)/* && chmod 0700 /usr/local/var/run/watchman"
alias ngrok-cra="ngrok http 3000"
alias upgrade="yarn upgrade-interactive --latest"
alias alert="say ok i am done"

whats-on-port() {
  sudo lsof -i tcp:$1
}

whats-on-port-3000() {
  sudo lsof -i tcp:3000
}

yarn-reset () {
  echo "deleting ./node_modules ..."
  rm -rf ./node_modules
  echo "deleted ./node_modules"
  yarn install
}
alias cold-install="yarn-reset"
alias ci="cold-install"

# git commands
alias git-cheatsheet="cat ~/.oh-my-zsh/plugins/git/git.plugin.zsh"
alias gu="git pull --rebase --prune"
alias gtl="git tag -l"
alias gta="gtl"
alias gbdf="git branch -D"
alias git-stash-everything="git stash --include-untracked --keep-index"
alias gse="git-stash-everything"
alias gpf="git push --force"
alias gs="git sync"
gcr() {
  gco remotes/origin/$1
}
gcoo () {
  is_in_git_repo || return
  git branch -a --color=always | grep --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn} -v '/HEAD\s' | sort | fzf --ansi --multi --tac --preview-window right:70% --preview 'git log --oneline --graph --date=short --color=always --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -'$LINES | sed 's/^..//' | cut -d' ' -f1 | sed 's#^remotes/origin/##' | xargs git checkout
}
alias gpr="git pull-request"

echo "loaded profile-dev."