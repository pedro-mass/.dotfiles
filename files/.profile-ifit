echo "loading profile-ifit..."

export WORK=~/dev/work
export WEBVIEW=$WORK/phoenix-webview
export API=$WORK/phoenix-api-service

# for ifit/ifit
export NODE_PATH="/Users/$username/dev/work/ifit"
# pyenv
eval "$(pyenv init -)"

alias cold-start="yarn && yarn start"
alias cs="cold-start"
alias cold-test="yarn && yarn test"
alias ct="cold-test"
review() {
  [ -z "$1" ] && BRANCH='test' || BRANCH=$1
  [ -z "$2" ] && COMMAND="" || COMMAND="gcr $2"

  gco . && gco $1 && git sync && eval $COMMAND
}
alias rs="review test $1"
alias rsc="review test $1 && code . -r"
alias review-test="rs test $1"
alias rsm="review master $1"
alias rsmc="review test $1 && code . -r"
alias review-master="rsm $1"

alias serveo="ssh -R 80:localhost:3000 serveo.net"

# code shortcuts
alias code-feed="code $WORK/full-stack-feed.code-workspace"
alias code-workouts="code $WORK/workouts/wolf-workouts.code-workspace"
alias code-scratch="code $WORK/scratchpad.code-workspace"

# mongo settings
export PATH="/usr/local/sbin:$PATH"
export PATH="/usr/local/opt/mongodb-community@3.4/bin:$PATH"

function viper-mongo {
  mongo \
    --host galactica.ifit-dev.com \
    --port $1 \
    --ssl \
    --sslCAFile ~/.ssh/mongodb.ca.cert.pem \
    --sslPEMKeyFile ~/.ssh/mongodb.viper-user.key-and-cert.pem
}

function viper-mongo-test {
  viper-mongo 60000
}

push-dev () {
  [ -z "$1" ] && B=$(git rev-parse --abbrev-ref HEAD) || B=$1
  echo "Branch found: $B"

  if [[ $B == "dev" ]]; then
    echo "Can't push dev to dev"
  else
    git push origin $B:dev -f
    echo "Pushed '$B' to 'dev'!"
  fi
}

# function assumeIfitDev() {
#   unset AWS_PROFILE
#   aws-google-auth --username pedrom@ifit.com --profile ifit-dev --idp-id C02qg9qrp --sp-id 343618191391 --duration 43200 --region us-east-1 --role-arn arn:aws:iam::087082158606:role/ifit-dev-role --keyring
#   export AWS_PROFILE=ifit-dev
# }

function set-aws-profile () {
  if [ -n "${AWS_PROFILE}" ]; then
    return 0
  fi

  TEMP_CREDS=$(cat ~/.aws/credentials | grep -B 4 -A 1 "aws_session_expiration")

  if [ -z "${TEMP_CREDS}" ]; then
    return 0
  fi

  TEMP_CREDS_DATE=$(echo "${TEMP_CREDS}" | grep "aws_session_expiration" | cut -d " " -f 3)
  TEMP_CREDS_ROLE=$(echo "${TEMP_CREDS}" | head -n 1 | sed "s/\[//g" | sed "s/\]//g")


  if [[ $(date -u "+%Y-%m-%dT%H:%M:%S+0000") < "${TEMP_CREDS_DATE}" ]]; then
    echo "INFO: The environment variable \`AWS_PROFILE\` has been set to \`${TEMP_CREDS_ROLE}\`. Use \`unset AWS_PROFILE\` if you want to unset it."
    export AWS_PROFILE="${TEMP_CREDS_ROLE}"
  fi
}

set-aws-profile

function get-ifit-aws-creds () {
  ROLE=${1:-ifit-dev-role}

  aws-google-auth \
    --duration 43200 \
    --idp-id C02qg9qrp \
    --keyring \
    --profile ${ROLE} \
    --region us-east-1 \
    --role-arn arn:aws:iam::087082158606:role/${ROLE} \
    --sp-id 343618191391 \
    --username pedrom@ifit.com

  exit_code=$?

  if [ ${exit_code} != 0 ]; then
    echo "failed to retrieve credentials"
    return "${exit_code}"
  fi

  if [ -n "${AWS_PROFILE}" ]; then
    if [ "${AWS_PROFILE}" != "${ROLE}" ]; then
      echo "INFO: The environment variable \`AWS_PROFILE\` has been changed from \`${AWS_PROFILE}\` to \`${ROLE}\`. Use \`export AWS_PROFILE=${AWS_PROFILE}\` if you want to restore it."
    fi
  else
    echo "INFO: The environment variable \`AWS_PROFILE\` has been set to \`${ROLE}\`. Use \`unset AWS_PROFILE\` if you want to unset it."
  fi

  export AWS_PROFILE="${ROLE}"
}

echo "loaded profile-ifit."

